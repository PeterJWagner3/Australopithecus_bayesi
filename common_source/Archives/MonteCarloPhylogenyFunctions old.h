#ifdef MontCarloPhylogenyFunctions	#include <stdlib.h>	#include <stdio.h>	#include <time.h>	#include <math.h>	#include <string.h>	#include "Probability.h"	long **EvolveTreeVenn(int notu, int MU, int LAMBDA, int FREQRAT, int FOSSILS, int ANAGENSIS, long **desc);	long **EvolveMatrix(long **tree, int notu, long **matrix, int nchars, int *nstates, int *ctype, int *bias, int *maxch, int TTLSTP, int UNKNOWN, int GAP);	long **CladeMember(long **tree, int notu, int nodes);	int *MaximumChanges(long **matrix, int *min, int nchars, int notu, int *nstates, int GAP, int UNKNOWN);	long swap(long n);	long mswap(long n, int X);	long multi(long c,int X, int bias);	long **EvolveCladogram(int notu, long **tree);	double MinRate(int notu);	double MaxRate(int notu, int MXST);	int branchnumber(long **tree, int notu);	long **EvolveAdditiveDependent(int CH, int PI, long **tree, int notu, long **matrix, int *nstates, int *ctype, int *bias, int UNKNOWN, int INAP, int APS);	int	**DescendantNodes (long ** tree, int notu);	int number_of_nodes(long ** tree, int notu);#else	extern long **EvolveTreeVenn(int notu, int MU, int LAMBDA, int FREQRAT, int FOSSILS, int ANAGENSIS, long **desc);	extern long **EvolveMatrix(long **tree, int notu, long **matrix, int nchars, int *nstates, int *ctype, int *bias, int *maxch, int TTLSTP, int UNKNOWN, int GAP);	extern long **CladeMember(long **tree, int notu, int nodes);	extern int *MaximumChanges(long **matrix, int *min, int nchars, int notu, int *nstates, int GAP, int UNKNOWN);	extern long swap(long n);	extern long mswap(long n, int X);	extern long multi(long c,int X, int bias);	extern long **EvolveCladogram(int notu, long **tree);	extern double MinRate(int notu);	extern double MaxRate(int notu, int MXST);	extern int branchnumber(long **tree, int notu);	extern long **EvolveAdditiveDependent(int CH, int PI, long **tree, int notu, long **matrix, int *nstates, int *ctype, int *bias, int UNKNOWN, int INAP, int APS);	extern int	**DescendantNodes (long ** tree, int notu);	extern int number_of_nodes(long ** tree, int notu);#endif