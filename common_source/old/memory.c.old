#define memory#include "memory.h"#include <stdlib.h>#include <stdio.h>#include <time.h>#include <math.h>#include <string.h>/* Integer allocations/* written by M. Kosnik 2000.02.10/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *//* vector/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */int *ivector(int length){	int i;                int *v = (int*)malloc(length * sizeof (int));	if (!v) printf("allocation error in ivector");		/* initialize to 0 */	for (i=0 ; i<length ; i++) {		v[i]=0;	}		/* return pointer to array */	return v;		}void free_ivector(int *v){	free((void *) v);	return;		}/* matrix/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */int **intmatrix(int nrows, int ncolumns){int i, j;int **m;/* allocate pointers to rows */m = (int **)malloc(nrows * sizeof (int*));if (!m) printf("allocation error in intmatrix - primary");/* allocate rows and set pointers to them */for (i=0 ; i<nrows ; i++) {	m[i] = (int *) malloc (ncolumns * sizeof (int));	if (!m[i]) {		printf("allocation error in intmatrix - row %d", i);		exit(0);		}	}for (i=0; i<nrows; ++i)	for (j=0; j<ncolumns; ++j)		m[i][j]=0;/* return pointer to array of pointers to rows */return m;		}void free_intmatrix(int **m, int nrows, int ncolumns){	int i;		for (i=0 ; i<nrows ; i++)		free((void *) m[i]);	free((void *) m);		return;}/* double allocations/* written by M. Kosnik 2000.02.10/* modfied by P. Wagner 2002.01.24/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *//* vector/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */double *dvector(int length){	int i;                double *v = (double*)malloc(length * sizeof (double));	if (!v) printf("allocation error in fvector");		/* initialize to 0 */	for (i=0 ; i<length ; i++) {		v[i]=0.f;	}		/* return pointer to array */	return v;		}void free_dvector(double *v){	free((void *) v);	return;		}/* matrix/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */double **doubmatrix(int nrows, int ncolumns){int i, j;double **m;/* allocate pointers to rows */m = (double **)malloc(nrows * sizeof (double*));if (!m) printf("allocation error in doubmatrix - primary");		/* allocate rows and set pointers to them */for (i=0 ; i<nrows ; i++) {	m[i] = (double *) malloc (ncolumns * sizeof (double));	if (!m[i]) {		printf("allocation error in doubmatrix - row %d", i);		exit(0);		}	}		/* set all cells to 0.0 */	for (i=0; i<nrows; ++i)		for (j=0; j<ncolumns; ++j)			m[i][j]=0.f;	/* return pointer to array of pointers to rows */	return m;		}void free_doubmatrix(double **m, int nrows, int ncolumns){	int i;		for (i=0 ; i<nrows ; i++)		free((void *) m[i]);	free((void *) m);		return;}/* Long allocations/* Modified from M. Kosnik 2001.01.14/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *//* vector/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */long *lngvector(long length){	long i;		long *v = (long*)malloc(length * sizeof (long));	if (!v) printf("allocation error in lngvector");		/* initialize to 0 */	for (i=0 ; i<length ; i++) {		v[i]=0;	}		/* return pointer to array */	return v;}void free_lngvector(long *v){	free((void *) v);	return;		}/* matrix/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */long **lngmatrix(int nrows, int ncolumns){int i;long **m;/* allocate pointers to rows */m = (long **)malloc(nrows * sizeof (long*));if (!m) printf("allocation error in lngmatrix - primary");		/* allocate rows and set pointers to them */for (i=0 ; i<nrows ; i++) {	m[i] = (long *) malloc (ncolumns * sizeof (long));	if (!m[i]) {		printf("allocation error in lngmatrix - row %d", i);		exit(0);		}	}	/* return pointer to array of pointers to rows */return m;		}void free_lngmatrix(long **m, int nrows, int ncolumns){	int i;		for (i=0 ; i<nrows ; i++)		free((void *) m[i]);	free((void *) m);		return;}/* Unsigned long allocations/* written by M. Kosnik 2000.02.10/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *//* vector/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */unsigned long *ulvector(long length){	long i;		unsigned long *v = (unsigned long*)malloc(length * sizeof (unsigned long));	if (!v) printf("allocation error in ulvector");		/* initialize to 0 */	for (i=0 ; i<length ; i++) {		v[i]=0;	}		/* return pointer to array */	return v;}void free_ulvector(unsigned long *v){	free((void *) v);	return;		}/* matrix/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */unsigned long **ulmatrix(int nrows, int ncolumns){int i;unsigned long **m;/* allocate pointers to rows */m = (unsigned long **)malloc(nrows * sizeof (unsigned long*));if (!m) printf("allocation error in ulmatrix - primary");/* allocate rows and set pointers to them */for (i=0 ; i<nrows ; i++) {	m[i] = (unsigned long *) malloc (ncolumns * sizeof (unsigned long));	if (!m[i]) {		printf("allocation error in ulmatrix - row %d", i);		exit(0);		}	}	/* return pointer to array of pointers to rows */	return m;		}void free_ulmatrix(unsigned long **m, int nrows, int ncolumns){	int i;		for (i=0 ; i<nrows ; i++)		free((void *) m[i]);	free((void *) m);		return;}/* float allocations/* written by M. Kosnik 2000.02.10/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *//* vector/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */float *fvector(int length){	int i;                float *v = (float*)malloc(length * sizeof (float));	if (!v) printf("allocation error in fvector");		/* initialize to 0 */	for (i=0 ; i<length ; i++) {		v[i]=0.f;	}		/* return pointer to array */	return v;		}void free_fvector(float *v){	free((void *) v);	return;		}/* matrix/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */float **fmatrix(int nrows, int ncolumns){	int i,j;	float **m;	/* allocate pointers to rows */	m = (float**)malloc(nrows * sizeof (float*));	if (!m) printf("allocation error in fmatrix - primary");		/* allocate rows and set pointers to them */	for (i=0 ; i<nrows ; i++) {		m[i] = (float *) malloc (ncolumns * sizeof (float));		if (!m[i]) printf("allocation error in fmatrix - row %d", i);	}	/* initialize to 0 */	for (i=0 ; i<nrows ; i++) {		for (j=0 ; j<ncolumns ; j++) {			m[i][j]=0.f;		}	}	/* return pointer to array of pointers to rows */	return m;		}void free_fmatrix(float **m, int nrows, int ncolumns){	int i;		for (i=0 ; i<nrows ; i++)		free((void *) m[i]);	free((void *) m);		return;}